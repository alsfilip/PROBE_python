"""
September 23rd, 2015 - Alex Filipowicz

This is a python version of the PROBE task. 
It uses the exact same sequence, size, and colour scheme as the MATLAB version, but will be implemented in psychopy
rather than Psych TOOLBOX. This is the version that will be used with undergrads and potentially WRAP participants.

"""
from psychopy import core, visual, event, gui
import os
import time
import random

############################
# Participants information #
############################
#for testing purposes - goes through task automatically and quickly - just change key recording in trials() line 198
test = False

subNum = None
subID = None
category = 'UG'
sess = None
sessOrder = None
age = None
sex = None
run = None

#Test parameters
if test == True:
    subNum = "1"
    subID = "999"
    category = 'test'#"UG"
    sess = "s"
    sessOrder = '1'
    age = "99"
    sex = "MF"
    run = 1
elif test == False:
    infoBox = gui.Dlg(title = "Participant Information")
    infoBox.addField('Subject Number: ')
    infoBox.addField('Age: ')
    infoBox.addField('Sex (m or f): ')
    infoBox.addField('SONA ID: ')
    infoBox.addField('Session (s or c): ')
    infoBox.addField('Session Order (1 or 2): ')
    infoBox.show()
    if gui.OK:
        pData = infoBox.data
        subNum = str(pData[0])
        age = str(pData[1])
        sex = str(pData[2])
        subID = str(pData[3])
        sess = str(pData[4])
        sessOrder = str(pData[5])
    elif gui.CANCEL:
        core.quit()

#############
# Task sets #
#############

# Episode - i.e., nth mapping the person's been exposed to
#ep1 = ['1','1','1'] for testing
ep1 = ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4']
ep2 = ['5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8']
ep
ep4 = ['13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '13', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '14', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '15', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16', '16']
ep
ep
eps = [ep1,ep2,ep3,ep4,ep5,ep6]

# Number (1,2 or 3) to be displayed (e.g., in the 1,3,5 set, 1=1,2=3,3=5) - applies to both conditions
#nums1= ['2', '3', '3']#for testing
nums1 = ['2', '3', '3', '1', '2', '2', '3', '3', '1', '2', '1', '3', '2', '2', '1', '2', '3', '2', '1', '3', '1', '1', '1', '3', '1', '2', '3', '1', '2', '2', '2', '3', '3', '1', '2', '1', '3', '1', '2', '1', '2', '2', '3', '3', '1', '3', '1', '3', '2', '1', '1', '2', '3', '3', '1', '3', '3', '2', '2', '3', '2', '1', '1', '1', '3', '3', '2', '1', '3', '1', '2', '2', '3', '1', '2', '2', '3', '1', '3', '1', '1', '2', '3', '1', '3', '2', '3', '1', '3', '3', '1', '1', '2', '2', '2', '2', '2', '2', '2', '3', '2', '2', '3', '3', '3', '3', '3', '1', '3', '3', '1', '1', '2', '1', '3', '3', '1', '2', '3', '1', '2', '1', '1', '2', '3', '3', '2', '2', '1', '2', '2', '1', '2', '3', '2', '1', '1', '1', '3', '1', '3', '1', '1', '2', '1', '1', '1', '2', '2', '2', '1', '3', '2', '3', '3', '3', '2', '1', '1', '1', '2', '1', '3', '3', '2', '2', '1', '3', '3', '1', '2', '3', '3', '3', '1', '3', '2', '1', '2', '2']
nums2= ['3', '1', '3', '2', '2', '3', '3', '2', '1', '3', '3', '3', '1', '3', '1', '1', '1', '2', '1', '1', '1', '2', '1', '3', '2', '1', '2', '2', '1', '2', '2', '2', '2', '1', '1', '3', '3', '3', '2', '3', '3', '2', '1', '2', '1', '2', '3', '2', '2', '2', '1', '2', '3', '3', '3', '1', '3', '3', '1', '2', '3', '3', '1', '2', '1', '2', '3', '2', '3', '1', '3', '1', '2', '1', '1', '3', '3', '2', '2', '1', '2', '1', '1', '3', '2', '3', '3', '1', '1', '2', '1', '3', '2', '2', '1', '3', '1', '3', '2', '1', '1', '3', '1', '2', '3', '3', '2', '3', '2', '1', '2', '2', '3', '3', '2', '2', '2', '3', '3', '2', '3', '2', '1', '1', '3', '1', '3', '3', '2', '2', '3', '3', '2', '2', '1', '1', '3', '2', '1', '2', '1', '1', '1', '1', '2', '2', '3', '1', '2', '1', '3', '1', '1', '1', '1', '3', '3', '3', '2']
nums3= ['2', '3', '3', '1', '2', '2', '2', '2', '2', '1', '3', '1', '1', '1', '3', '2', '2', '1', '1', '1', '3', '2', '1', '1', '1', '3', '3', '2', '2', '3', '3', '3', '1', '2', '2', '1', '3', '2', '1', '1', '1', '3', '2', '3', '3', '3', '3', '2', '3', '1', '1', '1', '1', '1', '3', '1', '3', '2', '2', '3', '2', '3', '3', '3', '3', '2', '1', '2', '1', '3', '2', '2', '2', '2', '2', '3', '2', '1', '1', '3', '1', '2', '2', '3', '2', '1', '2', '1', '1', '2', '3', '1', '3', '1', '2', '3', '2', '1', '3', '3', '3', '2', '1', '2', '3', '3', '3', '1', '2', '3', '2', '2', '2', '1', '1', '1', '2', '1', '3', '3', '3', '1', '1', '2', '1', '1', '2', '3', '1', '2', '1', '3', '1', '3', '1', '1', '3', '2', '2', '1', '2', '3', '2', '3', '1', '2', '2', '1', '3', '2', '2', '3', '3', '3', '2', '3', '1', '3', '1']
nums4= ['1', '2', '1', '2', '3', '3', '3', '3', '3', '2', '3', '1', '3', '3', '2', '1', '2', '2', '3', '3', '2', '3', '2', '1', '1', '1', '2', '3', '2', '2', '2', '1', '2', '1', '3', '1', '1', '3', '3', '2', '1', '1', '2', '1', '1', '3', '2', '1', '2', '1', '1', '1', '1', '2', '3', '1', '3', '2', '2', '2', '1', '3', '2', '2', '2', '3', '3', '1', '3', '1', '2', '1', '3', '1', '3', '1', '3', '2', '2', '1', '1', '2', '3', '2', '1', '3', '2', '3', '3', '3', '2', '3', '1', '1', '3', '3', '1', '3', '2', '2', '2', '1', '2', '1', '2', '2', '2', '3', '2', '1', '1', '3', '2', '1', '1', '3', '1', '3', '3', '3', '2', '1', '3', '3', '1', '2', '1', '1', '2', '2', '3', '3', '2', '1', '3', '3', '3', '2', '2', '1', '1', '1', '3', '3', '2', '2', '1', '1', '1', '3', '1', '3', '2', '3', '1', '2', '2', '2', '3']
nums5= ['3', '3', '2', '1', '1', '2', '1', '1', '3', '1', '2', '2', '2', '3', '2', '1', '3', '3', '3', '1', '1', '3', '2', '1', '2', '3', '1', '2', '2', '3', '1', '3', '1', '2', '3', '2', '3', '1', '2', '1', '2', '1', '3', '2', '3', '3', '1', '1', '1', '3', '3', '3', '3', '2', '1', '1', '2', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '2', '1', '1', '1', '2', '3', '3', '3', '3', '3', '3', '3', '3', '1', '3', '1', '1', '3', '2', '3', '2', '2', '1', '3', '3', '1', '2', '1', '3', '2', '3', '2', '2', '2', '2', '3', '2', '1', '1', '2', '1', '1', '2', '2', '2', '1', '2', '1', '1', '1', '1', '3', '1', '2', '3', '1', '3', '1', '3', '3', '3', '1', '3', '2', '1', '2', '3', '2', '2', '3', '1', '1', '1', '2', '1', '2', '2', '2', '3', '1', '2', '1', '3', '2', '1', '2', '3']
nums6= ['1', '3', '2', '3', '1', '1', '3', '3', '3', '2', '3', '3', '3', '2', '2', '2', '1', '2', '1', '1', '2', '2', '1', '3', '2', '2', '1', '1', '2', '1', '3', '3', '1', '2', '2', '3', '1', '1', '1', '3', '3', '2', '2', '1', '2', '3', '2', '2', '1', '2', '2', '1', '2', '1', '3', '3', '1', '2', '3', '1', '1', '3', '3', '3', '1', '2', '3', '1', '3', '1', '3', '1', '1', '2', '1', '1', '1', '1', '1', '3', '3', '2', '1', '1', '2', '1', '3', '2', '1', '3', '2', '2', '3', '2', '2', '3', '3', '3', '3', '1', '3', '3', '2', '3', '2', '2', '2', '2', '2', '1', '3', '2', '3', '3', '1', '1', '2', '2', '3', '2', '2', '3', '3', '1', '3', '2', '2', '2', '1', '2', '2', '2', '3', '2', '1', '1', '1', '3', '3', '2', '2', '3', '2', '1', '3', '1', '2', '3', '1', '3', '3', '1', '1', '1', '3', '1', '3', '1', '1']
nums = [nums1,nums2,nums3,nums4,nums5,nums6]

#Correct locations for Change condition
#cLoc1 = ['1', '3', '3']#for testing
cLoc1 = ['1', '3', '3', '2', '1', '1', '3', '3', '2', '1', '2', '3', '1', '1', '2', '1', '3', '1', '2', '3', '2', '2', '2', '3', '2', '1', '3', '2', '1', '1', '1', '3', '3', '2', '1', '2', '3', '2', '1', '2', '1', '1', '3', '3', '2', '3', '2', '3', '3', '1', '1', '3', '4', '4', '1', '4', '4', '3', '3', '4', '3', '1', '1', '1', '4', '4', '3', '1', '4', '1', '3', '3', '4', '1', '3', '3', '4', '1', '4', '1', '1', '3', '4', '1', '4', '3', '4', '1', '4', '4', '1', '1', '3', '3', '3', '3', '2', '2', '2', '1', '2', '2', '1', '1', '1', '1', '1', '4', '1', '1', '4', '4', '2', '4', '1', '1', '4', '2', '1', '4', '2', '4', '4', '2', '1', '1', '2', '2', '4', '2', '2', '4', '2', '1', '2', '4', '4', '4', '1', '4', '1', '4', '4', '2', '3', '3', '3', '4', '4', '4', '3', '2', '4', '2', '2', '2', '4', '3', '3', '3', '4', '3', '2', '2', '4', '4', '3', '2', '2', '3', '4', '2', '2', '2', '3', '2', '4', '3', '4', '4']
cLoc2 = ['4', '2', '4', '1', '1', '4', '4', '1', '2', '4', '4', '4', '2', '4', '2', '2', '2', '1', '2', '2', '2', '1', '2', '4', '1', '2', '1', '1', '2', '1', '1', '1', '1', '2', '2', '4', '4', '4', '1', '4', '4', '1', '1', '2', '1', '2', '3', '2', '2', '2', '1', '2', '3', '3', '3', '1', '3', '3', '1', '2', '3', '3', '1', '2', '1', '2', '3', '2', '3', '1', '3', '1', '2', '1', '1', '1', '1', '3', '3', '4', '3', '4', '4', '1', '3', '1', '1', '4', '4', '3', '4', '1', '3', '3', '4', '1', '4', '1', '3', '4', '4', '1', '4', '3', '1', '1', '3', '1', '3', '4', '3', '1', '2', '2', '1', '1', '1', '2', '2', '1', '2', '1', '3', '3', '2', '3', '2', '2', '1', '1', '2', '2', '1', '1', '3', '3', '2', '1', '3', '1', '3', '3', '3', '3', '1', '1', '2', '3', '1', '3', '2', '3', '3', '3', '3', '2', '2', '2', '1']
cLoc3 = ['2', '4', '4', '1', '2', '2', '2', '2', '2', '1', '4', '1', '1', '1', '4', '2', '2', '1', '1', '1', '4', '2', '1', '1', '1', '4', '4', '2', '2', '4', '4', '4', '1', '2', '2', '1', '4', '2', '1', '1', '1', '4', '2', '4', '4', '4', '4', '2', '3', '2', '2', '2', '2', '2', '3', '2', '3', '4', '4', '3', '4', '3', '3', '3', '3', '4', '2', '4', '2', '3', '4', '4', '4', '4', '4', '3', '4', '2', '2', '3', '2', '1', '1', '2', '1', '4', '1', '4', '4', '1', '2', '4', '2', '4', '1', '2', '1', '4', '2', '2', '2', '1', '4', '1', '2', '2', '2', '4', '1', '2', '1', '1', '1', '4', '4', '4', '1', '4', '2', '2', '2', '4', '4', '2', '3', '3', '2', '1', '3', '2', '3', '1', '3', '1', '3', '3', '1', '2', '2', '3', '2', '1', '2', '1', '3', '2', '2', '3', '1', '2', '2', '1', '1', '1', '2', '1', '3', '1', '3']
cLoc4 = ['4', '1', '4', '1', '3', '3', '3', '3', '3', '1', '3', '4', '3', '3', '1', '4', '1', '1', '3', '3', '1', '3', '1', '4', '4', '4', '1', '3', '1', '1', '1', '4', '1', '4', '3', '4', '4', '3', '3', '1', '4', '4', '1', '4', '4', '3', '1', '4', '3', '2', '2', '2', '2', '3', '4', '2', '4', '3', '3', '3', '2', '4', '3', '3', '3', '4', '4', '2', '4', '2', '3', '2', '4', '2', '4', '2', '4', '3', '3', '2', '2', '3', '4', '3', '2', '4', '3', '4', '4', '4', '4', '2', '1', '1', '2', '2', '1', '2', '4', '4', '4', '1', '4', '1', '4', '4', '4', '2', '4', '1', '1', '2', '4', '1', '1', '2', '1', '2', '2', '2', '4', '1', '2', '1', '2', '3', '2', '2', '3', '3', '1', '1', '3', '2', '1', '1', '1', '3', '3', '2', '2', '2', '1', '1', '3', '3', '2', '2', '2', '1', '2', '1', '3', '1', '2', '3', '3', '3', '1']
cLoc5 = ['4', '4', '1', '3', '3', '1', '3', '3', '4', '3', '1', '1', '1', '4', '1', '3', '4', '4', '4', '3', '3', '4', '1', '3', '1', '4', '3', '1', '1', '4', '3', '4', '3', '1', '4', '1', '3', '4', '2', '4', '2', '4', '3', '2', '3', '3', '4', '4', '4', '3', '3', '3', '3', '2', '4', '4', '2', '4', '4', '4', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '2', '4', '4', '4', '2', '3', '2', '2', '2', '2', '2', '2', '2', '1', '2', '1', '1', '2', '3', '2', '3', '3', '1', '2', '2', '1', '3', '1', '2', '3', '2', '3', '3', '3', '3', '2', '3', '1', '1', '3', '1', '1', '3', '3', '3', '1', '3', '1', '1', '1', '1', '2', '1', '3', '1', '3', '1', '3', '1', '1', '1', '3', '1', '4', '3', '4', '1', '4', '4', '1', '3', '3', '3', '4', '3', '4', '4', '4', '1', '3', '4', '3', '1', '4', '3', '4', '1']
cLoc6 = ['4', '2', '3', '2', '4', '4', '2', '2', '2', '3', '2', '2', '2', '3', '3', '3', '4', '3', '4', '4', '3', '3', '4', '2', '3', '3', '4', '4', '3', '4', '2', '2', '4', '4', '4', '1', '2', '2', '2', '1', '1', '4', '4', '2', '4', '1', '4', '4', '2', '4', '4', '2', '4', '2', '1', '1', '2', '4', '1', '2', '2', '1', '1', '1', '2', '4', '1', '2', '1', '3', '4', '3', '3', '2', '3', '3', '3', '3', '3', '4', '4', '2', '3', '3', '2', '3', '4', '2', '3', '4', '2', '2', '4', '2', '2', '4', '4', '4', '4', '3', '4', '4', '2', '4', '2', '2', '2', '2', '2', '3', '4', '4', '3', '3', '1', '1', '4', '4', '3', '4', '4', '3', '3', '1', '3', '4', '4', '4', '1', '4', '4', '4', '3', '4', '1', '1', '1', '3', '3', '4', '4', '3', '4', '1', '3', '1', '4', '3', '1', '3', '3', '1', '1', '1', '3', '1', '3', '1', '1']
cLocs = [cLoc1,cLoc2,cLoc3,cLoc4,cLoc5,cLoc6]

#Correct locations for Same condition
#sLoc1 = ['3', '4', '4']#for testing
sLoc1 = ['3', '4', '4', '1', '3', '3', '4', '4', '1', '3', '1', '4', '3', '3', '1', '3', '4', '3', '1', '4', '1', '1', '1', '4', '1', '3', '4', '1', '3', '3', '3', '4', '4', '1', '3', '1', '4', '1', '3', '1', '3', '3', '4', '4', '1', '4', '1', '4', '1', '4', '4', '1', '2', '2', '4', '2', '2', '1', '1', '2', '1', '4', '4', '4', '2', '2', '1', '4', '2', '4', '1', '1', '2', '4', '1', '1', '2', '4', '2', '4', '4', '1', '2', '4', '2', '1', '2', '4', '2', '2', '4', '4', '1', '1', '1', '1', '4', '4', '4', '3', '4', '4', '3', '3', '3', '3', '3', '2', '3', '3', '2', '2', '4', '2', '3', '3', '2', '4', '3', '2', '4', '2', '2', '4', '3', '3', '4', '4', '2', '4', '4', '2', '4', '3', '4', '2', '2', '2', '3', '2', '3', '2', '2', '4', '1', '1', '1', '3', '3', '3', '1', '4', '3', '4', '4', '4', '3', '1', '1', '1', '3', '1', '4', '4', '3', '3', '1', '4', '4', '1', '3', '4', '4', '4', '1', '4', '3', '1', '3', '3']
sLoc2 = ['2', '4', '2', '1', '1', '2', '2', '1', '4', '2', '2', '2', '4', '2', '4', '4', '4', '1', '4', '4', '4', '1', '4', '2', '1', '4', '1', '1', '4', '1', '1', '1', '1', '4', '4', '2', '2', '2', '1', '2', '2', '1', '1', '3', '1', '3', '4', '3', '3', '3', '1', '3', '4', '4', '4', '1', '4', '4', '1', '3', '4', '4', '1', '3', '1', '3', '4', '3', '4', '1', '4', '1', '3', '1', '1', '2', '2', '1', '1', '4', '1', '4', '4', '2', '1', '2', '2', '4', '4', '1', '4', '2', '1', '1', '4', '2', '4', '2', '1', '4', '4', '2', '4', '1', '2', '2', '1', '2', '1', '4', '1', '4', '3', '3', '4', '4', '4', '3', '3', '4', '3', '4', '2', '2', '3', '2', '3', '3', '4', '4', '3', '3', '4', '4', '2', '2', '3', '4', '2', '4', '2', '2', '2', '2', '4', '4', '3', '2', '4', '2', '3', '2', '2', '2', '2', '3', '3', '3', '4']
sLoc3 = ['3', '4', '4', '1', '3', '3', '3', '3', '3', '1', '4', '1', '1', '1', '4', '3', '3', '1', '1', '1', '4', '3', '1', '1', '1', '4', '4', '3', '3', '4', '4', '4', '1', '3', '3', '1', '4', '3', '1', '1', '1', '4', '3', '4', '4', '4', '4', '3', '3', '2', '2', '2', '2', '2', '3', '2', '3', '4', '4', '3', '4', '3', '3', '3', '3', '4', '2', '4', '2', '3', '4', '4', '4', '4', '4', '3', '4', '2', '2', '3', '2', '1', '1', '2', '1', '4', '1', '4', '4', '1', '2', '4', '2', '4', '1', '2', '1', '4', '2', '2', '2', '1', '4', '1', '2', '2', '2', '4', '1', '2', '1', '1', '1', '4', '4', '4', '1', '4', '2', '2', '2', '4', '4', '3', '1', '1', '3', '4', '1', '3', '1', '4', '1', '4', '1', '1', '4', '3', '3', '1', '3', '4', '3', '4', '1', '3', '3', '1', '4', '3', '3', '4', '4', '4', '3', '4', '1', '4', '1']
sLoc4 = ['2', '4', '2', '4', '3', '3', '3', '3', '3', '4', '3', '2', '3', '3', '4', '2', '4', '4', '3', '3', '4', '3', '4', '2', '2', '2', '4', '3', '4', '4', '4', '2', '4', '2', '3', '2', '2', '3', '3', '4', '2', '2', '4', '2', '2', '3', '4', '2', '1', '4', '4', '4', '4', '1', '2', '4', '2', '1', '1', '1', '4', '2', '1', '1', '1', '2', '2', '4', '2', '4', '1', '4', '2', '4', '2', '4', '2', '1', '1', '4', '4', '1', '2', '1', '4', '2', '1', '2', '2', '2', '3', '4', '1', '1', '4', '4', '1', '4', '3', '3', '3', '1', '3', '1', '3', '3', '3', '4', '3', '1', '1', '4', '3', '1', '1', '4', '1', '4', '4', '4', '3', '1', '4', '3', '2', '4', '2', '2', '4', '4', '3', '3', '4', '2', '3', '3', '3', '4', '4', '2', '2', '2', '3', '3', '4', '4', '2', '2', '2', '3', '2', '3', '4', '3', '2', '4', '4', '4', '3']
sLoc5 = ['2', '2', '1', '4', '4', '1', '4', '4', '2', '4', '1', '1', '1', '2', '1', '4', '2', '2', '2', '4', '4', '2', '1', '4', '1', '2', '4', '1', '1', '2', '4', '2', '4', '1', '2', '1', '3', '2', '4', '2', '4', '2', '3', '4', '3', '3', '2', '2', '2', '3', '3', '3', '3', '4', '2', '2', '4', '2', '2', '2', '4', '4', '4', '4', '4', '4', '4', '3', '3', '3', '3', '3', '4', '2', '2', '2', '4', '3', '4', '4', '4', '4', '4', '4', '4', '1', '4', '1', '1', '4', '3', '4', '3', '3', '1', '4', '4', '1', '3', '1', '4', '3', '4', '3', '3', '3', '3', '4', '3', '1', '1', '3', '1', '1', '3', '3', '3', '1', '3', '1', '1', '1', '1', '4', '1', '3', '3', '2', '3', '2', '3', '3', '3', '2', '3', '4', '2', '4', '3', '4', '4', '3', '2', '2', '2', '4', '2', '4', '4', '4', '3', '2', '4', '2', '3', '4', '2', '4', '3']
sLoc6 = ['1', '4', '3', '4', '1', '1', '4', '4', '4', '3', '4', '4', '4', '3', '3', '3', '1', '3', '1', '1', '3', '3', '1', '4', '3', '3', '1', '1', '3', '1', '4', '4', '1', '1', '1', '2', '4', '4', '4', '2', '2', '1', '1', '4', '1', '2', '1', '1', '4', '1', '1', '4', '1', '4', '2', '2', '4', '1', '2', '4', '4', '2', '2', '2', '4', '1', '2', '4', '2', '2', '3', '2', '2', '4', '2', '2', '2', '2', '2', '3', '3', '4', '2', '2', '4', '2', '3', '4', '2', '3', '4', '4', '3', '4', '4', '3', '3', '3', '3', '2', '3', '3', '4', '3', '4', '4', '4', '4', '4', '2', '3', '1', '2', '2', '4', '4', '1', '1', '2', '1', '1', '2', '2', '4', '2', '1', '1', '1', '4', '1', '1', '1', '2', '1', '4', '4', '4', '2', '2', '1', '1', '2', '1', '4', '2', '4', '1', '2', '4', '2', '2', '4', '4', '4', '2', '4', '2', '4', '4']
sLocs = [sLoc1,sLoc2,sLoc3,sLoc4,sLoc5,sLoc6]

# Trap trial (1) or no trap (0) - applies to both conditions
#trap1 = ['0', '0', '1']#for testing
trap1 = ['0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0']
trap2 = ['0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0']
trap3 = ['0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0']
trap4 = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0']
trap5 = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1']
trap6 = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '1']
traps = [trap1,trap2,trap3,trap4,trap5,trap6]

#Strategy numbers for the same condition
#sStrat1 = ['3', '3', '3']#for testing
sStrat1 = ['3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3']
sStrat2 = ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2']
sStrat3 = ['3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3']
sStrat4 = ['2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2']
sStrat5 = ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2']
sStrat6 = ['3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']
sStrats = [sStrat1,sStrat2,sStrat3,sStrat4,sStrat5,sStrat6]
cStrats = eps

setLoc = None
strat = None
sesstype = None
if sess == 's':
    setLoc = sLocs
    strat = sStrats
    sesstype = "Same"
elif sess == 'c':
    setLoc = cLocs
    strat = cStrats
    sesstype = "Change"

##################
# Data recording #
##################

path = os.getcwd()
date_time=time.asctime()
dt=date_time.replace(' ','_')
dt2 = dt.replace(':','_')

# Initialize data file
datafile = file(path+'//data//'+str(category)+'_'+str(subID)+'_'+str(subNum)+'_'+str(sess)+'_'+sesstype+'_'+str(run)+'_'+dt2+'.csv','wb')
dataHeader = ["Category", "SubID", "SubNum", "Age", "Sex", "SessType", "SessNum", "Episode", "Strat", "NumPres", "Location", "Trap", "Run", "TotalTrial", "RunTrial", "StratTrial", "SubResp", "KeyCode", "Correct", "Reward", "RT"]
datafile.write(",".join(dataHeader)+'\n')
datafile.flush()

#Initialize questionnaire file
qdat = file(path+'//data//Qdat_'+str(category)+'_'+str(subID)+'_'+str(subNum)+'_'+str(sess)+'_'+sesstype+'_'+str(run)+'_'+dt2+'.csv','wb')
qdat.write(",".join(["Category","SubID","SubNum","Age","Sex","SessType","SessNum","Question","Answer"])+'\n')
qdat.flush()

# Function to record data
def recData(cat, sid, snum, ag, sx, sTy, sessNum, ep, sTrat, npres, loca, tps, r, tottr, rtr, strtr, subres, keycd, cor, rw, rt):
    dat = map(str,[cat, sid, snum, ag, sx, sTy, sessNum, ep, sTrat, npres, loca, tps, r, tottr, rtr, strtr, subres, keycd, cor, rw, rt])
    datafile.write(",".join(dat)+'\n')
    datafile.flush()

####################
# Task environment #
####################

# Colors
corrCol = (-1,1,-1)#"green" #color for correct response
errCol = (1,-1,-1)#"red" #color for incorrect response
backG = (-1,-1,-1)
textCol = (1,1,1)

# Experimental window
if test == False:
    win = visual.Window(units = 'pix',color = backG, fullscr = True)
    event.Mouse(visible=False)
elif test == True:
    win = visual.Window(units = 'pix', color = backG)#make small window for testing purposes

# Buffer stimulus boxes, centre circle, and text stimulus (numbers)
boxSize = 120
textHeight = 100
backRect = visual.Rect(win, width=boxSize*4+10,height = boxSize+10,fillColor = textCol)
stimBox = {}
numStim = {}
posStart = -boxSize - (boxSize/2)
for i in range(4):
    stimBox[i]=visual.Rect(win,width=boxSize,height = boxSize,pos = (posStart,0), fillColor = backG,lineWidth = 10,lineColor = textCol)
    numStim[i]=visual.TextStim(win,text='0',font='Arial',height = textHeight,pos=(posStart,0))
    posStart += boxSize
circ = visual.Circle(win,radius = 8,fillColor = textCol)
# Dictionary to map keys to spatial positions
keyDict = {'j':"1",'k':"2",'l':"3",'semicolon':"4"}

#Sets
numSet = None
if int(subNum) % 2 == 1:
    if sess == 's':
        numSet = [1,3,5]
    elif sess == 'c':
        numSet = [2,4,6]
elif int(subNum) % 2 == 0:
    if sess == 's':
        numSet = [2,4,6]
    elif sess == 'c':
        numSet = [1,3,5]

# Timing
feedbackTime = .8 #display time
isi = .4
feedbackDel = .1
if test == True:
    feedbackTime = 0 #display time
    isi = 0
    feedbackDel = 0

# Function to draw stimuli
def stimDraw(n, pos = None, col = False):
    backRect.draw()
    if pos == None:
        for i in range(4):
            numStim[i].setText(n)
            stimBox[i].draw()
            numStim[i].draw()
    else:
        for i in range(4):
            stimBox[i].draw()
        numStim[pos-1].setText(n)
        numStim[pos-1].setColor(col)
        numStim[pos-1].draw()
    circ.draw()
    win.flip()
    for i in range(4):
        numStim[i].setColor(textCol)

# runs the trials
def trials(n,maps,tp,rInfo):
    stimDraw(" ")
    core.wait(isi)
    stim = numSet[int(n)-1]
    stimDraw(stim) #Draw initial stim
    #rtClock = core.Clock() #Clock to measure RTs
    RT = None
    keys = None
    if test == False:
    	rtClock = core.Clock()
    	keys = event.waitKeys(keyList=['j','k','l','semicolon','q','escape']) #Wait for a keypress
    	RT = rtClock.getTime()
    elif test == True:
    	rtClock = core.Clock()
    	keys = random.choice([['j'],['k'],['l'],['semicolon']])#comment above line and ucomment this one for testing
    	RT = rtClock.getTime()
    #RT = rtClock.getTime() #Get RT
    if keys[0] in ['q','escape']:
        core.quit()
    loc = keyDict[keys[0]] #Get which key has been pressed
    resp = None #Participant response
    rCol = None #Feedback colour placeholder
    #Guides trap trials (Correct feedback for incorrect response, and vice versa)
    stimDraw(" ")
    core.wait(feedbackDel)
    correct = None
    fback = None
    if loc == maps:
        correct = 1
    else:
        correct = 0
    if int(tp) == 0:
        if loc == maps:
            fback = 1
            resp = stim
            rCol = corrCol
        else:
            fback = 0
            resp = "X"
            rCol = errCol
    elif int(tp) == 1:
        if loc == maps:
            fback = 0
            resp = "X"
            rCol = errCol
        else:
            fback = 1
            resp = stim
            rCol = corrCol
    tottr = 1
    rtr = 1
    strtr = 1
    stimDraw(resp,pos=int(loc),col=rCol)
    #Record data
    recData(rInfo[0], rInfo[1], rInfo[2], rInfo[3], rInfo[4], rInfo[5], rInfo[6], rInfo[7], rInfo[8], rInfo[9], rInfo[10], rInfo[11], rInfo[12], rInfo[13], rInfo[14], rInfo[15], loc, keys[0], correct, fback, RT)
    core.wait(feedbackTime)

#recInfo = [category, subID, subNum, age, sex, sesstype, sessOrder, currEp, st, tNum, cL, trp, runNum, totTrial, runTrial, epTrial]

#["Category", "SubID", "SubNum", "Age", "Sex", "SessType", "SessNum", "Episode", "Strat", "NumPres", "Location", "Trap", "Run", "TotalTrial", "RunTrial", "StratTrial", "SubResp", "KeyCode", "Correct", "Reward", "RT"]

#(cat, sid, snum, ag, sx, sTy, sessNum, ep, sTrat, npres, loca, tps, r, tottr, rtr, strtr, subres, keycd, cor, rw, rt)
#################################
# Instruction and break screens #
#################################

def instructions():
    t = visual.TextStim(win,text="Please wait for the RA to start the experiment.",height=20,color=textCol,wrapWidth=700)
    t.draw()
    win.flip()
    k1 = event.waitKeys()
    if k1[0] == 'q':
        core.quit()
    stimDraw(" ")
    k2 = event.waitKeys()
    if k2[0] == 'q':
        core.quit()
    stimDraw("#")
    k3 = event.waitKeys(keyList=['j','k','l','semicolon','q'])
    loc = None
    if k3[0] == 'q':
        core.quit()
    else:
        loc = keyDict[k3[0]]
    stimDraw("#",pos=int(loc),col=corrCol)
    k4 = event.waitKeys(keyList=['j','k','l','semicolon','q'])
    loc = None
    if k4[0] == 'q':
        core.quit()
    else:
        loc = keyDict[k4[0]]
    stimDraw("X",pos=int(loc),col=errCol)
    event.waitKeys()

def startScreen():
    ts = visual.TextStim(win,text="Get ready...", height = 30)
    ts.draw()
    win.flip()
    if test == True:
        core.wait(2)
    else:
        key = event.waitKeys()

def breakScreen(r):
    bt = "Block "+str(r)+" of 6 completed.\nPress any key to start next block."
    if r == 6:
        bt = 'Block 6 of 6 completed.\nPress any key to move on to a quick questionnaire.'
    tt = visual.TextStim(win,text=bt,height=30)
    tt.draw()
    win.flip()
    if test == True:
        core.wait(2)
    else:
        key = event.waitKeys()

def questionnaire():
    txt = "We have two questions to ask you regarding the effort applied to this task. When answering the following questions, we would like to remind you that your responses will be kept anonymous and will in no way impact the credits you have earned from participation in this experiment.\n\nPlease press any key to start the questionnaire."
    t = visual.TextStim(win,text=txt,height = 20,wrapWidth=750, color=textCol)
    t.draw()
    win.flip()
    event.waitKeys()
    txt2 = "Did you follow the task instructions?\n\nPress 'y' for yes or 'n' for no"
    t.setText(txt2)
    t.draw()
    win.flip()
    keys = event.waitKeys(keyList = ['y','n','q'])
    qdat.write(",".join(map(str,[category, subID, subNum, age, sex, sesstype,sessOrder, "1",keys[0]]))+'\n')
    qdat.flush()
    txt3 = "Did you make most of your choices randomly without paying attention to the task?\n\nPress 'y' for yes or 'n' for no"
    t.setText(txt3)
    t.draw()
    win.flip()
    keys2 = event.waitKeys(keyList = ['y','n','q'])
    qdat.write(",".join(map(str,[category, subID, subNum, age, sex, sesstype,sessOrder,"2",keys2[0]]))+'\n')
    qdat.flush()
    txt4 = "Thank you for your participation! Please see the RA for further instructions."
    t.setText(txt4)
    t.draw()
    win.flip()
    event.waitKeys()

#################
# Trial Handler #
#################
#instructions()
startScreen()
totTrial = 1
for run in range(6):
    ep=eps[run]
    num=nums[run]
    corrLocs = setLoc[run]
    trap=traps[run]
    sts = strat[run]
    runNum = run+1
    runTrial = 1
    currEp = ep[0]
    epTrial = 1
    for trial in range(len(ep)):
        trialEp = ep[trial]
        if currEp != trialEp:
            currEp = trialEp
            epTrial = 1
        tNum = num[trial]
        cL = corrLocs[trial]
        trp = trap[trial]
        st = sts[trial]
        recInfo = [category, subID, subNum, age, sex, sesstype, sessOrder, currEp, st, tNum, cL, trp, runNum, totTrial, runTrial, epTrial]
        trials(tNum,cL,trp,recInfo)
        totTrial += 1
        runTrial += 1
        epTrial += 1
    breakScreen(run+1)
questionnaire()
datafile.close()
qdat.close()